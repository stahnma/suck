#!/usr/bin/perl

use CGI ':standard';
use Constants;
use Database;
use VirtualCookie;
use Gosh;
use Prettify;
CGI::ReadParse();

# =============================================================================
sub GetNextItemID
# Find the newest item in the suck database.
# =============================================================================
{
	my ($dbh) = @_;

	my @results = RunQuery("select max(Item_ID) MAXX from suck_t", $dbh);

	return $results[0]->{MAXX} + 1;
}

# =============================================================================
sub AddNewItem
# Insert a new item into the suck database.
# =============================================================================
{
	my ($item, $dbh) = @_;

	$item =~ s/\'/\'\'/g;

	if ($item =~ /a new item/i)
	{
		return;
	}
        # Write who did what in Log
	my $existsQuery = "select name from suck_t where name like '$item'";
	my @results = RunQuery($existsQuery, $dbh);

	if($#results < 0)
	{
		my $id = GetNextItemID($dbh);
		RunStatement("insert into suck_t values($id, '$item', "
			   . "0, 0)", $dbh);
               # Write who did what in Log
               logCreate($item);	
	}

}

sub logCreate
{
  my ($item) = @_;
  my $logfile="/var/www/html/stats/suck.log";
  # Verify Log Exists
  my ($wkday,$month,$day,$time,$year) = split(/\s+/, localtime);
  my $date="$day $month $year  $time ";
  if ( -f $logfile)
  {
     open(LOG, ">>$logfile");
     print LOG "$date SUCK $ENV{REMOTE_ADDR} added $item\n";
     close LOG; 
  }

}

# =============================================================================
sub GetActiveEntries
# =============================================================================
{
	my ($dbh) = @_;

	my $stmt = "select * from suck_t where stagnation <= $SUCK_RETIRE "
	         . "order by Points desc";
	my @results = RunQuery($stmt, $dbh);
	
	return @results;
}

# =============================================================================
sub RateItem
# Rate the selected item and enforce stagnation on unselected items.
# =============================================================================
{
	my ($item, $rating, $dbh) = @_;

	if(HasVirtualCookie($item, $COOKIE_SUCK))
	{
		return;
	}

	my @active = GetActiveEntries($dbh);
	my $stmt = "update suck_t set Points=Points+$rating, stagnation= "
	         . "stagnation - $#active where Item_ID=$item";
	RunStatement($stmt, $dbh);

	$stmt = "update suck_t set stagnation=0 where Stagnation < 0";
	RunStatement($stmt, $dbh);

	$stmt = "update suck_t set stagnation=Stagnation + 1 where Item_ID "
	      . "<> $item and stagnation <= $SUCK_RETIRE";
	RunStatement($stmt, $dbh);

	SetVirtualCookie($item, $COOKIE_SUCK);
}

# =============================================================================
sub GetOldEntries
# =============================================================================
{
	my ($dbh) = @_;

	my $stmt = "select * from suck_t where stagnation > $SUCK_RETIRE "
	         . "order by Points desc";
	my @results = RunQuery($stmt, $dbh);

	return @results;
}

# =============================================================================
sub ShowActiveItems
# =============================================================================
{
	my ($dbh) = @_;

	my @active = GetActiveEntries($dbh);

	ShowEntries($GOSH_SUCKITEM, @active);
}

# =============================================================================
sub ShowRetiredItems
# =============================================================================
{
	my ($dbh) = @_;

	my @old = GetOldEntries($dbh);

	ShowEntries($GOSH_SUCKOLD, @old);
}

# =============================================================================
sub ShowEntries
# Show the suck items.
# =============================================================================
{
	my ($goshpage, @active) = @_;

	my $maxpoints = $active[0]->{Points};
	my $negative = 0;
	foreach my $i (0..$#active)
	{
		my %gosh;
		$gosh{item} = $active[$i]->{Item_ID};
		$gosh{name} = $active[$i]->{Name};
		
		if ($maxpoints == 0)
		{
			$gosh{percent} = 0;
		}
		else
		{
			$gosh{percent} = int($active[$i]->{Points} / 
				$maxpoints*100+.5);
		}

		if($gosh{percent} !~ /^-/)
		{
			$gosh{percent} = "+$gosh{percent}";
		}
		elsif($negative == 0)
		{
			print "<hr>";
			$negative = 1;
		}

		if($active[$i]->{stagnation} >= $SUCK_STAGNANT)
		{
			$gosh{status} = "sad";
		}
		elsif($active[$i]->{stagnation} <= $SUCK_POPULAR)
		{
			$gosh{status} = "happy";
		}
		else
		{
			$gosh{status} = "blank";
		}

		$gosh{color} = $negative ? "red" : "green";

		WriteGosh($goshpage, %gosh);
	}
}


# =============================================================================
sub main
# Pretend this is a "real" programming language ;)
# =============================================================================
{
	my $dbh = GetHandle();

	if($in{action} eq "insert")
	{
		# Modified for Input sanitation
 		if($in{newitem} =~ /[><()]/ )
                {
                   print "Content-type: text/html\n\n\n";
		   print "No hacking\n<br />"; 
                   print "<a href=/suck>Back to Suck</a>";
                     exit 1;
                }
		AddNewItem($in{newitem}, $dbh);
		Redirect($ENV{HTTP_REFERER});
	}
	elsif($in{item} != 0)
	{
		RateItem($in{item}, $in{rate}, $dbh);
		ShowActiveItems($dbh);
	}
	elsif($in{action} eq "retired")
	{
		ShowRetiredItems($dbh);
	}
	else {
		ShowActiveItems($dbh);
	}

	PrintFooter();
       print "<!-- $ENV{REMOTE_ADDR} -->\n";
	CloseHandle($dbh);
}

main();
